■演習6-1 ビットマップインデックスとハッシュインデックス
本文ではインデックスの種類として、B-Treeインデックスのみを取り上げました。
これ以外にも、リレーショナルデータベースで利用可能なインデックスには「ビットマップインデックス」や「ハッシュインデックス」といった
補助的な存在します。これらのインデックスの長所と短所を調べてください。

ビットインデックス：
	＜長所＞
	・カーディナリティが低いデータを検索するときに使用すると高速化する
	・検索条件にNULLやOR演算子があるときもインデックスを使用できる
	・連続するビット値は圧縮されるため、B-Treeに比べて容量が少なくて済む
	＜短所＞
	・B-Treeインデックスに比べて更新にかかる時間が大きい
ハッシュインデックス：
	＜長所＞
	・キー値に対してハッシュ関数で返す値がうまく分散していれば、検索、挿入、更新、削除で高速化する
	＜短所＞
	・異なる複数のキーに対して、同じハッシュ値を結果として返すことがあるので、
	すべてのページになるべく均一に割り振るようなハッシュ関数を見つける必要がある
	・範囲検索では高速化しない
	・ソートでは高速化しない
	・ハッシュ値に対応する領域にレコードを追加する空き容量がなくなった場合パフォーマンスが著しく低下する
	（格納するデータ量が見積れないような場合には向かない）

■演習6-2 インデックスの再編成
「B-treeインデックスに関するその他の注意事項」(178ページ)で、B-treeインデックスは更新が発生することで時間とともに構造が崩れ、
性能が劣化することを説明しました。これを防止するためにインデックスの再編成が必要になります。再編成を実施するための具体的な方法を、DBMSごとに調べてください。

[SQL Server]
	インデックス名を指定して再構築するコマンド
	ALTER INDEX {インデックス名} REBUILD
	インデックス名を指定して再編成するコマンド
	ALTER INDEX {インデックス名} REORGANIZE
	※再構築と再編成は処理対象が異なる。再構築はインデックス全体を再作成。再編成はリーフレベルで再作成。

[MySQL]
	テーブルをダンプしてリロードすることによって再構築
	mysqldump {データベース名} t1 > dump.sql
	mysql {データベース名} < dump.sql

[Oracle DB]
	インデックス名を指定して再構築するコマンド
	ALTER INDEX {インデックス名} REBUILD