■演習8-1 ビジネスロジックの実装方法の検討
本文にて代理キーについて解説した際、テーブルに主キーを設定せず、重複行データを登録後に削除する、といった間違った設計について触れました。
しかし、主キーによる一意制約に限らず、データが満たすべき様々な条件（ビジネスロジック）を、テーブルの制約ではなくアプリケーションコードによって実装することは
一般的に行われています。さて、このビジネスロジックをアプリケーションコードで実装することについて、以下の問いについて考えてください。

【問い1】ビジネスロジックをアプリケーションコードで実装することの是非
	ビジネスロジックをアプリケーションで実装するべきかどうかは、実現したい機能の要件によって判断するべき。
	アプリケーションで実装することによって、その機能のテストの必要がでてくるためコストがかかる。
	しかし、要件によってはアプリケーションで実装した方がシンプルに実現できたり、データベース側で実現が難しい場合があるので、場合によって判断するべき。

【問い2】ビジネスロジックをデータベースの「トリガー」で実装することの是非
	ビジネスロジックをデータベースの「トリガー」で実装することはデメリットが多いと考えられる。
	DELETEやINSERTなどをきっかけに更新処理が動く「トリガー」はビジネスロジックがアプリケーション側とデータベース側に分散されることになり、管理が困難になる。
	また、データベース側で実行する処理のためアプリケーション側からブラックボックスになりメンテナンスの観点からも管理が困難になる。


■演習8-2 一時テーブル
8-4節で紹介したようなアドホックなデータ、つまり一時的にしか使わず、処理が終わればなくなって構わないようなデータを用意する手段として、
DBMSは「一時テーブル」という機能を用意しています。この機能について調べ、使うことの是非を考えてください。

	一時テーブル（TEMPORARY TABLE）はセッション毎やトランザクション毎など決められたタイミングまで保持することのできるテーブルで、
	そのセッション内では通常のテーブルと同じように使用できるため、毎度SQLを実行してデータを取得するビューなどに比べ処理速度の面で有利であると考えられる。
	また通常のテーブルと同様、INDEXを作成することができる為、大量のデータを扱う場合などに使用する機能としてメリットがある。